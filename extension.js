const vscode = require('vscode');

function activate(context) {
    context.subscriptions.push(
        vscode.languages.registerCompletionItemProvider(
            { language: 'python' },
            new PythonCompletionItemProvider()
        )
    );
}

class PythonCompletionItemProvider {
    provideCompletionItems(document, position, token) {
        const functionNames = [
			'print',
			'range',
			'len',
			'input',
			'abs',
			'min',
			'max',
			'sum',
			'sorted',
			'chr',
			'ord',
			'bin',
			'hex',
			'oct',
			'round',
			'divmod',
			'pow',
			'isinstance',
			'type',
			'callable',
			'dir',
			'globals',
			'locals',
			'eval',
			'exec',
			'hash',
			'id',
			'enumerate',
			'zip',
			'reversed',
			'slice',
			'format',
			'bool',
			'int',
			'float',
			'str',
			'list',
			'tuple',
			'dict',
			'set',
			'frozenset',
			'is',
			'in',
			'not',
			'and',
			'or',
			'if',
			'else',
			'elif',
			'while',
			'for',
			'break',
			'continue',
			'pass',
			'def',
			'return',
			'lambda',
			'try',
			'except',
			'finally',
			'raise',
			'assert',
			'with',
			'as',
			'class',
			'import',
			'from',
			'del',
			'global',
			'nonlocal',
			'yield',
			'async',
			'await',
			'True',
			'False',
			'None',
			'getattr',
			'hasattr',
			'setattr',
			'delattr',
			'property',
			'staticmethod',
			'classmethod',
			'super',
			'issubclass',
			'locals',
			'globals',
			'open',
			'read',
			'write',
			'close',
			'seek',
			'tell',
			'flush',
			'split',
			'join',
			'strip',
			'replace',
			'startswith',
			'endswith',
			'lower',
			'upper',
			'capitalize',
			'title',
			'find',
			'count',
			'encode',
			'decode',
			'format',
			'isalnum',
			'isalpha',
			'isdigit',
			'islower',
			'isupper',
			'isspace',
			'istitle',
			'isnumeric',
			'isdecimal',
			'isidentifier',
			'isprintable',
			'isspace',
			'exec',
			'eval',
			'iter',
			'next',
			'round',
			'zip',
			'map',
			'filter',
			'reduce',
			'any',
			'all',
			'sorted',
			'sum',
			'max',
			'min',

			'divmod',
			'pow',
			'round',
			'bin',
			'oct',
			'hex',
			'callable',
			'eval',
			'exec',
			'isinstance',
			'issubclass',
			'type',
			'dir',
			'globals',
			'locals',
			'id',
			'hash',
			'slice',
			'zip',
			'enumerate',
			'reversed',
			'sorted',
			'format',
			'chr',
			'ord',
			'bool',
			'int',
			'float',
			'str',
			'list',
			'tuple',
			'dict',
			'set',
			'frozenset',
			'range',
			'len',
			'print',
			'input',
			'abs',
			'min',
			'max',
			
			// OpenCV functions
			'cv2.imread',
			'cv2.imshow',
			'cv2.imwrite',
			'cv2.cvtColor',
			'cv2.resize',
			'cv2.rectangle',
			'cv2.circle',
			'cv2.putText',

			// PyTube3 functions
			'pytube.YouTube',
			'pytube.YouTube.streams',
			'pytube.YouTube.streams.get_by_itag',
			'pytube.YouTube.streams.filter',
			'pytube.YouTube.streams.first',
			'pytube.YouTube.register_on_progress_callback',
			
			// Telebot functions
			'telebot.TeleBot',
			'telebot.TeleBot.polling',
			'telebot.TeleBot.send_message',
			'telebot.TeleBot.send_photo',
			'telebot.TeleBot.send_document',
			'telebot.TeleBot.get_updates',
			'telebot.TeleBot.set_update_listener',
			
			// PyTorch functions
			'torch.Tensor',
			'torch.tensor',
			'torch.from_numpy',
			'torch.zeros',
			'torch.ones',
			'torch.eye',
			'torch.randn',
			'torch.randint',
			'torch.matmul',
			'torch.nn.Module',
			'torch.nn.Linear',
			'torch.nn.Conv2d',
			'torch.nn.MaxPool2d',
			'torch.optim.Adam',
			'torch.utils.data.DataLoader',
			'torchvision.transforms.ToTensor',
			'torchvision.models.resnet18',

		];
		  
        const completionItems = [];

        for (const functionName of functionNames) {
            const completionItem = new vscode.CompletionItem(functionName, vscode.CompletionItemKind.Function);
			completionItems.push(completionItem);
        }

        return completionItems;
    }
}


function deactivate() {}

module.exports = {
    activate,
    deactivate
};
